import {RawSession, RawUserDataResponse} from './types/RawEvents';
import {EventCardProps} from './types/Events'
import {UserDataResponse} from './types/UserData'
import { getUserInfo } from './api/profile/getOwnProfile';

export const convertCategoriesToIds = (categories: string[]): number[] => {
    const categoryMap: { [key: string]: number } = {
      'movies': 1,    // –§–∏–ª—å–º—ã
      'games': 2,     // –ò–≥—Ä—ã
      'board': 3,     // –ù–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã
      'other': 4      // –î—Ä—É–≥–æ–µ
    };
    
    return categories.map(category => categoryMap[category]).filter(id => id !== undefined);
};

export const convertCategRuToEng = (categoryIds: string[]): ('games' | 'movies' | 'board' | 'other')[] => {
    const idMap: { [key: string]: 'games' | 'movies' | 'board' | 'other' } = {
      '–§–∏–ª—å–º—ã': 'movies',    // –§–∏–ª—å–º—ã
      '–ò–≥—Ä—ã': 'games',     // –ò–≥—Ä—ã
      '–ù–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã': 'board',     // –ù–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã
      '–î—Ä—É–≥–æ–µ': 'other'      // –î—Ä—É–≥–æ–µ
    };
    
    return categoryIds.map(id => idMap[id]).filter(category => category !== undefined);
};

export const convertIdsToCategories = (categoryIds: number[]): ('games' | 'movies' | 'board' | 'other')[] => {
    const idMap: { [key: number]: 'games' | 'movies' | 'board' | 'other' } = {
      1: 'movies',    // –§–∏–ª—å–º—ã
      2: 'games',     // –ò–≥—Ä—ã
      3: 'board',     // –ù–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã
      4: 'other'      // –î—Ä—É–≥–æ–µ
    };
    
    return categoryIds.map(id => idMap[id]).filter(category => category !== undefined);
};

export const convertSocialContactsToString = (socialContacts: { name: string; link: string }[]): string => {
    if (!Array.isArray(socialContacts) || socialContacts.length === 0) {
        return '';
    }

    return socialContacts
        .filter(contact => contact.name && contact.link) // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
        .map(contact => `${contact.name.trim()}:${contact.link.trim()}`) // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
        .join(', '); // –û–±—ä–µ–¥–∏–Ω—è–µ–º —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏ –ø—Ä–æ–±–µ–ª
};

export const getAccesToken = (): string => {
  return localStorage.getItem('access_token') || '';
}

export function decodeJWT(token: string) {
  try {
    const payload = token.split('.')[1];
    const decoded = JSON.parse(atob(payload));
    return decoded;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JWT:', error);
    return null;
  }
}

export function debugJWT(token: string): void {
  try {
    // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ —á–∞—Å—Ç–∏
    const parts = token.split('.');
    
    if (parts.length !== 3) {
      console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JWT —Ç–æ–∫–µ–Ω–∞');
      console.log('–¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 3 —á–∞—Å—Ç–µ–π, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã—Ö —Ç–æ—á–∫–∞–º–∏');
      return;
    }

    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º header (–ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å)
    const headerBase64 = parts[0].replace(/-/g, '+').replace(/_/g, '/');
    const header = JSON.parse(atob(headerBase64));

    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º payload (–≤—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å)
    const payloadBase64 = parts[1].replace(/-/g, '+').replace(/_/g, '/');
    const payload = JSON.parse(
      decodeURIComponent(
        atob(payloadBase64)
          .split('')
          .map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))
          .join('')
      )
    );

    // –ö—Ä–∞—Å–∏–≤–æ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
    console.log('üîê JWT TOKEN DECODED');
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    console.log('\nüìã HEADER:');
    console.log(header);
    console.log('\nüì¶ PAYLOAD:');
    console.log(payload);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
    if (payload.exp) {
      const expirationDate = new Date(payload.exp * 1000);
      const isExpired = Date.now() >= payload.exp * 1000;
      console.log('\n‚è∞ EXPIRATION:');
      console.log(`  –ò—Å—Ç–µ–∫–∞–µ—Ç: ${expirationDate.toLocaleString()}`);
      console.log(`  –°—Ç–∞—Ç—É—Å: ${isExpired ? '‚ùå –ò—Å—Ç—ë–∫' : '‚úÖ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω'}`);
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
    if (payload.iat) {
      const issuedDate = new Date(payload.iat * 1000);
      console.log('\nüìÖ ISSUED AT:');
      console.log(`  –°–æ–∑–¥–∞–Ω: ${issuedDate.toLocaleString()}`);
    }

    console.log('\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ JWT:', error);
    console.log('–£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ JWT —Ç–æ–∫–µ–Ω–∞');
  }
}

export const getUserData = async (): UserDataResponse | null => {
  try {
    const data = localStorage.getItem('userData');
    return data ? JSON.parse(data) : await updateUserData();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ localStorage:', error);
    return null;
  }
}

export const updateUserData = async (): UserDataResponse | null => {
  const accessToken: string = getAccesToken();
  
  let UserInfo;

  try {
    UserInfo = getUserInfo(accessToken);
    localStorage.setItem('userData', JSON.stringify(UserInfo));
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage:', error);
  }

  return UserInfo || null;
}

export const getCategoryIcon = (category: string): string => {
  const lowerCategory = category.toLowerCase();
  
  if (lowerCategory.includes('games') || lowerCategory =='–∏–≥—Ä—ã') {
    return '/events/games.png';
  } else if (lowerCategory.includes('movies') || lowerCategory.includes('—Ñ–∏–ª—å–º—ã')) {
    return '/events/movies.png';
  } else if (lowerCategory.includes('boards') || lowerCategory.includes('–Ω–∞—Å—Ç–æ–ª–∫–∏') || lowerCategory.includes('–Ω–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã')) {
    return '/events/board.png';
  } else {
    return '/events/other.png'; // default
  }
};

export const getSocialIcon = (name: string, link?: string, ): string => {
  const lowerLink = (link|| " ").toLowerCase();
  const lowerName = name.toLowerCase();
  
  if (lowerLink.includes('discord') || lowerName.includes('discord') || lowerName.includes('ds')) {
    return '/social/ds.png';
  } else if (lowerLink.includes('t.me') || lowerLink.includes('telegram') || lowerName.includes('telegram') || lowerName.includes('tg')) {
    return '/social/tg.png';
  } else if (lowerLink.includes('vk.com') || lowerName.includes('–≤–∫–æ–Ω—Ç–∞–∫—Ç–µ') || lowerName.includes('vk')) {
    return '/social/vk.png';
  } else if (lowerLink.includes('wa.me') || lowerLink.includes('whatsapp') || lowerName.includes('whatsapp') || lowerName.includes('wa')) {
    return '/social/wa.png';
  } else if (lowerLink.includes('snapchat') || lowerName.includes('snapchat') || lowerName.includes('snap')) {
    return '/social/snap.png';
  } else {
    return '/default/soc_net.png';
  }
};

export function mapServerSessionToEvent(session: RawSession): EventCardProps {
  return {
    id: session.id,
    type: 'other',
    image: session.image_url ?? '',
    date: session.start_time ?? '',
    end_time: session.end_time ?? undefined,
    title: session.title ?? '',
    genres: session.genres ?? [],
    participants: session.current_users ?? 0,
    maxParticipants: session.max_users ?? 0,
    // –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—Ä–æ–Ω—Ç–æ–≤—ã–µ –ø–æ–ª—è ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º–∏/–¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏
    duration: undefined,
    location: typeof session.location === 'string' && session.location.toLowerCase() === 'online' ? 'online' : 'offline',
    adress: session.location ?? '',
    city: session.city ?? '',
    scale: undefined,
    isEditMode: undefined,
    onEdit: undefined,
    groupId: undefined,
  };
}

export function mapRawUserDataToUserData(raw: RawUserDataResponse): UserDataResponse {
  const recent_sessions = (raw.recent_sessions || []).map(mapServerSessionToEvent);
  const upcoming_sessions = (raw.upcoming_sessions || []).map(mapServerSessionToEvent);

  // –ü—Ä—è–º–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç, –ø—Ä–∏–≤–µ–¥—è —Ç–∏–ø –∫ UserDataResponse ‚Äî –ø–æ–ª—è —Å–æ–≤–ø–∞–¥–∞—é—Ç –ø–æ —Å–µ–º–∞–Ω—Ç–∏–∫–µ.
  return {
    data_register: formatDate(raw.data_register),
    enterprise: raw.enterprise,
    image: raw.image,
    name: raw.name,
    us: raw.us,
    popular_genres: raw.popular_genres,
    recent_sessions,
    status: raw.status,
    telegram_link: raw.telegram_link,
    tiles: raw.tiles,
    upcoming_sessions,
    user_stats: raw.user_stats,
  } as UserDataResponse;
}

export function formatDate(dateString: string): string {
  const date = new Date(dateString);
  const day = date.getDate().toString().padStart(2, '0');
  const month = (date.getMonth() + 1).toString().padStart(2, '0'); // –º–µ—Å—è—Ü—ã —Å 0
  const year = date.getFullYear();
  return `${day}.${month}.${year}`;
}

export function formatTime(dateString: string): string {
  const date = new Date(dateString);
  const hours = date.getHours().toString().padStart(2, '0');
  const minutes = date.getMinutes().toString().padStart(2, '0');
  return `${hours}:${minutes}`;
}