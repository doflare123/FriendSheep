// src/components/Groups/GroupAdminComponent.tsx

'use client';

import React, { useState } from 'react';
import AdminSidebar from './AdminSidebar';
import CreateGroupForm from './CreateGroupForm';
import RequestsManagementComponent from './RequestsManagementComponent';
import { AdminMenuSection } from '../../types/AdminTypes';
import { convertCategoriesToIds, convertSocialContactsToString } from '../../Constants';
import { GroupData } from '../../types/Groups';
import styles from '../../styles/Groups/admin/AdminPage.module.css';
import {editGroup} from '../../api/edit_group';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—É—Å—Ç—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
const EmptySection: React.FC<{ title: string }> = ({ title }) => (
  <div className={styles.emptyState}>
    <div className={styles.emptyIcon}>üìã</div>
    <div>–†–∞–∑–¥–µ–ª "{title}" –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</div>
  </div>
);

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã
const GroupInfoSection: React.FC<{ groupData?: GroupData; groupId?: string }> = ({ groupData, groupId }) => {
  const [isLoading, setIsLoading] = useState(false);
  const [saveMessage, setSaveMessage] = useState<{ type: 'success' | 'error'; text: string } | null>(null);

  const handleFormSubmit = async (formData: any) => {
    if (!groupId) {
      setSaveMessage({ type: 'error', text: 'ID –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      return;
    }

    setIsLoading(true);
    setSaveMessage(null);

    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞)
      const accessToken = localStorage.getItem('access_token') || '';
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —á–∏—Å–ª–∞
      const categoriesNumbers = convertCategoriesToIds(formData.categories);
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤ —Å—Ç—Ä–æ–∫—É
      const contactsString = convertSocialContactsToString(formData.socialContacts);

      await editGroup(
        formData.name,
        formData.description,
        formData.shortDescription,
        formData.city,
        categoriesNumbers,
        formData.isPrivate,
        formData.image,
        contactsString,
        accessToken,
        parseInt(groupId)
      );

      setSaveMessage({ type: 'success', text: '–î–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!' });
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:', error);
      setSaveMessage({ 
        type: 'error', 
        text: error.response?.data?.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏' 
      });
    } finally {
      setIsLoading(false);
    }
  };

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ñ–æ—Ä–º—ã
  const initialFormData = groupData ? {
    name: groupData.name,
    shortDescription: '', // –£ GroupData –Ω–µ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—è, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º
    description: groupData.description,
    city: groupData.city,
    isPrivate: false, // –£ GroupData –Ω–µ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—è, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –∑–∞–¥–∞—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    categories: groupData.categories,
    socialContacts: groupData.contacts?.map(contact => ({
      name: contact.name,
      link: contact.link
    })) || [],
    imagePreview: groupData.image
  } : undefined;

  return (
    <div>
      {saveMessage && (
        <div style={{
          padding: '12px 16px',
          marginBottom: '20px',
          borderRadius: '8px',
          backgroundColor: saveMessage.type === 'success' ? '#d4edda' : '#f8d7da',
          border: `1px solid ${saveMessage.type === 'success' ? '#c3e6cb' : '#f5c6cb'}`,
          color: saveMessage.type === 'success' ? '#155724' : '#721c24'
        }}>
          {saveMessage.text}
        </div>
      )}
      
      <CreateGroupForm 
        onSubmit={handleFormSubmit}
        initialData={initialFormData}
        showTitle={false}
        isLoading={isLoading}
      />
    </div>
  );
};

interface GroupAdminComponentProps {
  groupId?: string;
  groupData?: GroupData;
}

const GroupAdminComponent: React.FC<GroupAdminComponentProps> = ({ groupId, groupData }) => {
  const [activeSection, setActiveSection] = useState('info');
  
  const menuSections: AdminMenuSection[] = [
    {
      id: 'info',
      title: '–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ',
      component: GroupInfoSection
    },
    {
      id: 'requests',
      title: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏',
      component: RequestsManagementComponent
    },
    {
      id: 'events',
      title: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏',
    }
  ];

  const currentSection = menuSections.find(section => section.id === activeSection);
  const CurrentComponent = currentSection?.component;

  const getSectionTitle = () => {
    switch (activeSection) {
      case 'info':
        return '–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è';
      case 'requests':
        return '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏';
      case 'events':
        return '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏';
      default:
        return '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã';
    }
  };

  return (
    <div className="bgPage">
      <div className={styles.adminPageWrapper}>
        <div className={styles.adminPage}>
          <AdminSidebar
            sections={menuSections}
            activeSection={activeSection}
            onSectionChange={setActiveSection}
          />
          
          <div className={styles.mainContent}>
            <div className={styles.contentHeader}>
              <h2>{getSectionTitle()}</h2>
            </div>
            
            <div className={styles.contentBody}>
              {CurrentComponent ? (
                <CurrentComponent groupData={groupData} groupId={groupId} />
              ) : (
                <EmptySection title={currentSection?.title || ''} />
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default GroupAdminComponent;