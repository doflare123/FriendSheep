definitions:
  groups.Group:
    properties:
      Description:
        type: string
      categories:
        items:
          $ref: '#/definitions/models.Category'
        type: array
      city:
        type: string
      contacts:
        items:
          $ref: '#/definitions/groups.GroupContact'
        type: array
      createdAt:
        type: string
      creater:
        $ref: '#/definitions/models.User'
      createrId:
        type: integer
      id:
        type: integer
      image:
        type: string
      isPrivate:
        type: boolean
      nameGroup:
        type: string
      smallDescription:
        type: string
      updatedAt:
        type: string
    type: object
  groups.GroupContact:
    properties:
      groupId:
        type: integer
      id:
        type: integer
      link:
        type: string
      name:
        type: string
    type: object
  handlers.AuthResponse:
    properties:
      access_token:
        type: string
      admin_groups:
        items:
          $ref: '#/definitions/services.AdminGroupResponse'
        type: array
      refresh_token:
        type: string
    type: object
  handlers.CachedPopularSessionsDoc:
    properties:
      count:
        type: integer
      sessions:
        items:
          $ref: '#/definitions/handlers.PopularSessionResponseDoc'
        type: array
      updated_at:
        type: string
    type: object
  handlers.ChangePasswordInput:
    properties:
      new_password:
        type: string
    required:
    - new_password
    type: object
  handlers.GetJoinRequestsResponseDoc:
    properties:
      requests:
        items:
          $ref: '#/definitions/handlers.GroupJoinRequestDoc'
        type: array
    type: object
  handlers.GroupJoinRequestDoc:
    properties:
      group:
        $ref: '#/definitions/handlers.GroupPreviewDoc'
      groupId:
        example: 5
        type: integer
      id:
        example: 3
        type: integer
      status:
        example: pending
        type: string
      user:
        $ref: '#/definitions/handlers.UserPreviewDoc'
      userId:
        example: 42
        type: integer
    type: object
  handlers.GroupPreviewDoc:
    properties:
      id:
        example: 5
        type: integer
      image:
        example: https://img.com/group.png
        type: string
      name:
        example: Закрытая группа
        type: string
    type: object
  handlers.JoinGroupInputDoc:
    properties:
      groupId:
        type: integer
    required:
    - groupId
    type: object
  handlers.JoinGroupResponseDoc:
    properties:
      joined:
        example: false
        type: boolean
      message:
        example: Заявка на вступление отправлена
        type: string
    type: object
  handlers.PopularSessionResponseDoc:
    properties:
      count_users_max:
        type: integer
      current_users:
        type: integer
      duration:
        type: integer
      end_time:
        type: string
      genres:
        items:
          type: string
        type: array
      group_name:
        type: string
      id:
        type: integer
      image_url:
        type: string
      popularity_rate:
        type: number
      session_place:
        type: string
      session_type:
        type: string
      start_time:
        type: string
      title:
        type: string
    type: object
  handlers.RefreshRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  handlers.SessionEmailInput:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  handlers.SessionJoinInputDoc:
    properties:
      group_id:
        type: integer
      session_id:
        type: integer
    required:
    - group_id
    - session_id
    type: object
  handlers.UserPreviewDoc:
    properties:
      email:
        example: ivan@example.com
        type: string
      id:
        example: 42
        type: integer
      image:
        example: https://img.com/avatar.png
        type: string
      name:
        example: Иван
        type: string
    type: object
  handlers.UserRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.Category:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  models.SessionRegResponse:
    properties:
      session_id:
        type: string
    type: object
  models.User:
    properties:
      createdAt:
        type: string
      data_register:
        type: string
      email:
        type: string
      enterprise:
        type: boolean
      id:
        type: integer
      image:
        type: string
      name:
        type: string
      password:
        type: string
      updatedAt:
        type: string
      us:
        type: string
    required:
    - email
    - name
    - password
    - us
    type: object
  news.Comments:
    properties:
      created_at:
        type: string
      id:
        type: integer
      news_id:
        type: integer
      text:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
    type: object
  news.ContentNews:
    properties:
      id:
        type: integer
      news_id:
        type: integer
      text:
        type: string
    required:
    - text
    type: object
  news.News:
    properties:
      comments:
        items:
          $ref: '#/definitions/news.Comments'
        type: array
      content:
        items:
          $ref: '#/definitions/news.ContentNews'
        type: array
      created_time:
        type: string
      createdAt:
        type: string
      description:
        type: string
      id:
        type: integer
      image:
        type: string
      title:
        type: string
      updatedAt:
        type: string
    required:
    - description
    - image
    - title
    type: object
  services.AdminGroupInfResponse:
    properties:
      applications:
        items:
          $ref: '#/definitions/services.GroupJoinRequestRes'
        type: array
      categories:
        items:
          type: string
        type: array
      city:
        type: string
      contacts:
        items:
          $ref: '#/definitions/services.Contacts'
        type: array
      description:
        type: string
      id:
        type: integer
      image:
        type: string
      name:
        type: string
      private:
        type: boolean
      sessions:
        items:
          $ref: '#/definitions/services.SessionResponse'
        type: array
      small_description:
        type: string
    type: object
  services.AdminGroupResponse:
    properties:
      category:
        items:
          type: string
        type: array
      id:
        type: integer
      image:
        type: string
      member_count:
        type: integer
      name:
        type: string
      small_description:
        type: string
      type:
        type: string
    type: object
  services.ChangeTilesPatternInput:
    properties:
      count_all:
        type: boolean
      count_films:
        type: boolean
      count_games:
        type: boolean
      count_other:
        type: boolean
      count_table:
        type: boolean
      spent_time:
        type: boolean
    type: object
  services.CommentDTO:
    properties:
      created_time:
        type: string
      id:
        type: integer
      image:
        type: string
      name:
        type: string
      text:
        type: string
      user_id:
        type: integer
    type: object
  services.ConfirmResetPasswordInput:
    properties:
      email:
        type: string
      password:
        type: string
      session_id:
        type: string
    required:
    - email
    - password
    - session_id
    type: object
  services.Contacts:
    properties:
      link:
        type: string
      name:
        type: string
    type: object
  services.CreateCommentInput:
    properties:
      text:
        type: string
    required:
    - text
    type: object
  services.CreateNewsInput:
    properties:
      description:
        type: string
      image:
        type: string
      text:
        type: string
      title:
        type: string
    required:
    - description
    - image
    - text
    - title
    type: object
  services.CreateUserInput:
    properties:
      email:
        type: string
      name:
        maxLength: 40
        minLength: 5
        type: string
      password:
        type: string
      session_id:
        type: string
    required:
    - email
    - name
    - password
    - session_id
    type: object
  services.GenreStats:
    properties:
      count:
        type: integer
      name:
        type: string
    type: object
  services.GetGroups:
    properties:
      category:
        items:
          type: string
        type: array
      count:
        type: integer
      createdAt:
        type: string
      description:
        type: string
      id:
        type: integer
      image:
        type: string
      isPrivate:
        type: boolean
      name:
        type: string
    type: object
  services.GetGroupsResponse:
    properties:
      groups:
        items:
          $ref: '#/definitions/services.GetGroups'
        type: array
      has_more:
        type: boolean
      page:
        type: integer
      total:
        type: integer
    type: object
  services.GetNotifyResponse:
    properties:
      invites:
        items:
          $ref: '#/definitions/services.InviteDTO'
        type: array
      notifications:
        items:
          $ref: '#/definitions/services.NotificationDTO'
        type: array
    type: object
  services.GetUsers:
    properties:
      id:
        type: integer
      image:
        type: string
      name:
        type: string
      status:
        type: string
      us:
        type: string
    type: object
  services.GetUsersResponse:
    properties:
      has_more:
        type: boolean
      page:
        type: integer
      total:
        type: integer
      users:
        items:
          $ref: '#/definitions/services.GetUsers'
        type: array
    type: object
  services.GroupInf:
    properties:
      categories:
        items:
          type: string
        type: array
      city:
        type: string
      contacts:
        items:
          $ref: '#/definitions/services.Contacts'
        type: array
      count_members:
        type: integer
      creater:
        type: string
      description:
        type: string
      id:
        type: integer
      image:
        type: string
      name:
        type: string
      sessions:
        items:
          $ref: '#/definitions/services.SessionDetailResponse'
        type: array
      subscription:
        type: boolean
      users:
        items:
          $ref: '#/definitions/services.UsersGroups'
        type: array
    type: object
  services.GroupJoinRequestRes:
    properties:
      id:
        type: integer
      image:
        type: string
      name:
        type: string
      us:
        type: string
      userId:
        type: integer
    type: object
  services.GroupResponse:
    properties:
      category:
        items:
          type: string
        type: array
      id:
        type: integer
      image:
        type: string
      member_count:
        type: integer
      name:
        type: string
      small_description:
        type: string
      type:
        type: string
    type: object
  services.GroupUpdateInput:
    properties:
      categories:
        items:
          type: integer
        type: array
      city:
        type: string
      contacts:
        type: string
      description:
        type: string
      image:
        type: string
      is_private:
        type: boolean
      name:
        type: string
      small_description:
        type: string
    type: object
  services.InformationAboutUser:
    properties:
      data_register:
        type: string
      enterprise:
        type: boolean
      image:
        type: string
      name:
        type: string
      popular_genres:
        items:
          $ref: '#/definitions/services.GenreStats'
        type: array
      recent_sessions:
        items:
          $ref: '#/definitions/services.SessionInfo'
        type: array
      status:
        type: string
      telegram_link:
        type: boolean
      tiles:
        items:
          type: string
        type: array
      upcoming_sessions:
        items:
          $ref: '#/definitions/services.SessionInfo'
        type: array
      us:
        type: string
      user_stats:
        $ref: '#/definitions/services.UserStatsInfo'
    type: object
  services.InviteDTO:
    properties:
      createdAt:
        type: string
      groupId:
        type: integer
      groupName:
        type: string
      id:
        type: integer
      status:
        type: string
    type: object
  services.JoinGroupResult:
    properties:
      joined:
        type: boolean
      message:
        type: string
    type: object
  services.NewsDTO:
    properties:
      comments:
        items:
          $ref: '#/definitions/services.CommentDTO'
        type: array
      content:
        type: string
      created_time:
        type: string
      description:
        type: string
      id:
        type: integer
      image:
        type: string
      title:
        type: string
    type: object
  services.NewsPage:
    properties:
      hasMore:
        type: boolean
      items:
        items:
          $ref: '#/definitions/news.News'
        type: array
      page:
        type: integer
      total:
        type: integer
    type: object
  services.NotificationDTO:
    properties:
      id:
        type: integer
      sendAt:
        type: string
      sent:
        type: boolean
      type:
        type: string
      viewed:
        type: boolean
    type: object
  services.PaginatedSearchResponse:
    properties:
      has_next:
        type: boolean
      has_previous:
        type: boolean
      page:
        type: integer
      page_size:
        type: integer
      sessions:
        items:
          $ref: '#/definitions/services.SessionResponse'
        type: array
      total:
        type: integer
      total_pages:
        type: integer
    type: object
  services.ResetPasswordRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  services.SessionDetailResponse:
    properties:
      metadata:
        $ref: '#/definitions/sessions.SessionMetadata'
      session:
        $ref: '#/definitions/services.SubSessionDetail'
    type: object
  services.SessionInfo:
    properties:
      category_session:
        type: string
      city:
        type: string
      current_users:
        type: integer
      end_time:
        type: string
      genres:
        items:
          type: string
        type: array
      id:
        type: integer
      image_url:
        type: string
      location:
        type: string
      max_users:
        type: integer
      start_time:
        type: string
      status:
        type: string
      title:
        type: string
      type_session:
        type: string
    type: object
  services.SessionResponse:
    properties:
      city:
        default: prikol
        type: string
      count_users_max:
        type: integer
      current_users:
        type: integer
      duration:
        type: integer
      genres:
        items:
          type: string
        type: array
      group_name:
        type: string
      id:
        type: integer
      image_url:
        type: string
      session_place:
        type: string
      session_type:
        type: string
      start_time:
        type: string
      title:
        type: string
    type: object
  services.SessionUpdateInput:
    properties:
      count_users_max:
        type: integer
      duration:
        type: integer
      image_url:
        type: string
      start_time:
        type: string
      title:
        type: string
    type: object
  services.SubSessionDetail:
    properties:
      count_users_max:
        type: integer
      current_users:
        type: integer
      duration:
        type: integer
      end_time:
        type: string
      group_id:
        type: integer
      id:
        type: integer
      image_url:
        type: string
      session_place:
        type: string
      session_type:
        type: string
      start_time:
        type: string
      title:
        type: string
    type: object
  services.UpdateUserRequest:
    properties:
      image:
        type: string
      name:
        maxLength: 40
        minLength: 5
        type: string
      status:
        maxLength: 50
        minLength: 1
        type: string
      us:
        maxLength: 40
        minLength: 5
        type: string
    type: object
  services.UserStatsInfo:
    properties:
      count_all:
        type: integer
      count_another:
        type: integer
      count_create_session:
        type: integer
      count_films:
        type: integer
      count_games:
        type: integer
      count_table_games:
        type: integer
      most_big_session:
        type: integer
      most_pop_day:
        type: string
      series_session_count:
        type: integer
      spent_time:
        type: integer
    type: object
  services.UsersGroups:
    properties:
      image:
        type: string
      name:
        type: string
    type: object
  services.VerifySessionInput:
    properties:
      code:
        type: string
      session_id:
        type: string
      type:
        type: string
    required:
    - code
    - session_id
    - type
    type: object
  sessions.SessionMetadata:
    properties:
      ageLimit:
        type: string
      country:
        type: string
      fields:
        additionalProperties: true
        type: object
      genres:
        items:
          type: string
        type: array
      location:
        type: string
      notes:
        type: string
      sessionID:
        type: integer
      year:
        type: integer
    type: object
info:
  contact: {}
paths:
  /api/admin/groups:
    get:
      description: Возвращает список всех групп, где текущий авторизованный пользователь
        является создателем. В ответе также будет количество участников.
      produces:
      - application/json
      responses:
        "200":
          description: Список групп администратора
          schema:
            items:
              $ref: '#/definitions/services.AdminGroupResponse'
            type: array
        "401":
          description: Пользователь не авторизован
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Пользователь не найден
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Получить группы, созданные пользователем
      tags:
      - groups_admin
  /api/admin/groups/{groupId}:
    delete:
      description: Удаляет группу. Только администратор группы может удалить её. Удаляются
        также участники и заявки на вступление.
      parameters:
      - description: ID группы
        in: path
        name: groupId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Группа успешно удалена
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Некорректный ID группы
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Нет прав или группа не найдена
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Удаление группы
      tags:
      - groups_admin
    patch:
      consumes:
      - application/json
      description: Позволяет администратору группы изменить её данные, включая контакты.
        Контакты передаются строкой в формате "название:ссылка, название:ссылка".
        Чтобы удалить все контакты, передайте пустую строку.
      parameters:
      - description: ID группы
        in: path
        name: groupId
        required: true
        type: integer
      - description: 'Новые данные группы. Для контактов используйте формат: ''vk:https://vk.com/mygroup,
          tg:https://t.me/mygroup'''
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/services.GroupUpdateInput'
      produces:
      - application/json
      responses:
        "200":
          description: Группа успешно обновлена
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Ошибка валидации или некорректный ID
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Нет прав на редактирование
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Группа не найдена
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Обновить информацию о группе
      tags:
      - groups_admin
  /api/admin/groups/{groupId}/infGroup:
    get:
      description: Возвращает детальную информацию о группе, созданной пользователем,
        включая заявки на вступление и сессии в статусе 'Набор'. Доступно только создателю
        группы.
      parameters:
      - description: ID группы
        in: path
        name: groupId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Детальная информация о группе
          schema:
            $ref: '#/definitions/services.AdminGroupInfResponse'
        "400":
          description: Некорректный ID группы
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Пользователь не авторизован
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Доступ запрещен (пользователь не является создателем)
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Группа не найдена
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Получить детальную информацию о группе для администратора
      tags:
      - groups_admin
  /api/admin/groups/{groupId}/members/{userId}:
    delete:
      description: Удаляет участника из группы, если текущий пользователь — админ
        или оператор
      parameters:
      - description: ID группы
        in: path
        name: groupId
        required: true
        type: integer
      - description: ID пользователя, которого нужно удалить
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Пользователь удалён из группы
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Некорректные параметры
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Нет прав на удаление
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Пользователь не найден или не в группе
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Удалить участника из группы
      tags:
      - groups_admin
  /api/admin/groups/UploadPhoto:
    post:
      consumes:
      - multipart/form-data
      description: Загружает фотографию в хранилище и возвращает URL. Этот URL затем
        можно использовать для создания или обновления данных сущности (например,
        группы).
      parameters:
      - description: Изображение для загрузки (JPG, PNG, максимум 10MB)
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: URL загруженного изображения
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Файл не предоставлен, имеет неверный тип или размер
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Пользователь не авторизован
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Загрузка фотографии
      tags:
      - groups_admin
  /api/admin/groups/requests/{requestId}/approve:
    post:
      description: Одобрение заявки на вступление в закрытую группу. Только админ
        может это сделать.
      parameters:
      - description: ID заявки
        in: path
        name: requestId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Заявка одобрена
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: 'Ошибка: заявка не найдена или уже обработана'
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Ошибка авторизации
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Вы не админ
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Одобрить заявку
      tags:
      - groups_admin
  /api/admin/groups/requests/{requestId}/reject:
    post:
      description: Отклонение заявки на вступление в закрытую группу. Только админ
        может это сделать.
      parameters:
      - description: ID заявки
        in: path
        name: requestId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Заявка отклонена
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: 'Ошибка: заявка не найдена или уже обработана'
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Ошибка авторизации
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Вы не админ
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Отклонить заявку
      tags:
      - groups_admin
  /api/admin/groups/requests/all/{groupId}/approveAll:
    post:
      description: Одобрение всех заявок на вступление в закрытую группу. Только админ
        может это сделать.
      parameters:
      - description: ID группы
        in: path
        name: groupId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Все заявки одобрены
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: 'Ошибка: нет ожидающих заявок или уже обработаны'
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Ошибка авторизации
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Вы не админ
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Одобрить все заявки
      tags:
      - groups_admin
  /api/admin/groups/requests/all/{groupId}/rejectAll:
    post:
      description: Отклонение всех заявок на вступление в закрытую группу. Только
        админ может это сделать.
      parameters:
      - description: ID группы
        in: path
        name: groupId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Все заявки отклонены
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: 'Ошибка: нет ожидающих заявок'
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Ошибка авторизации
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Вы не админ
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Отклонить все заявки
      tags:
      - groups_admin
  /api/admin/groups/requestsForUser:
    post:
      description: Администратор группы отправляет приглашение (заявку) указанному
        пользователю на вступление в группу.
      parameters:
      - description: ID группы, в которую отправляется приглашение
        example: 1
        in: query
        name: group_id
        required: true
        type: integer
      - description: ID пользователя, которому отправляется приглашение
        example: 2
        in: query
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Заявка на вступление отправлена
          schema:
            $ref: '#/definitions/services.JoinGroupResult'
        "400":
          description: Некорректные параметры запроса
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Пользователь не авторизован
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Нет прав администратора
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Пользователь или группа не найдены
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Отправить приглашение пользователю в группу
      tags:
      - groups_admin
  /api/admin/sessions/{sessionId}:
    patch:
      consumes:
      - application/json
      description: Позволяет администратору группы изменить данные сессии, принадлежащей
        этой группе
      parameters:
      - description: ID сессии
        in: path
        name: sessionId
        required: true
        type: integer
      - description: Новые данные сессии
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/services.SessionUpdateInput'
      produces:
      - application/json
      responses:
        "200":
          description: Сессия успешно обновлена
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Ошибка валидации или некорректный ID
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Нет прав на редактирование
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Сессия не найдена
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Обновить информацию о сессии
      tags:
      - Сессии_админ
  /api/groups/{groupId}:
    get:
      description: Получает информацию о группе по ID, включая список участников,
        категории, контакты и сессии. Для приватных групп требуется членство.
      parameters:
      - description: ID группы
        in: path
        name: groupId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Информация о группе
          schema:
            $ref: '#/definitions/services.GroupInf'
        "400":
          description: Некорректный ID группы
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Пользователь не авторизован
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Доступ к приватной группе запрещен
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Группа не найдена
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Получить информацию о группе
      tags:
      - groups
  /api/groups/{groupId}/leave:
    delete:
      description: Удаляет текущего пользователя из группы. Админ не может покинуть
        группу, если он единственный админ.
      parameters:
      - description: ID группы
        in: path
        name: groupId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Вы покинули группу
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Ошибка — пользователь не найден, не состоит в группе или единственный
            админ
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Не авторизован
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Покинуть группу
      tags:
      - groups
  /api/groups/createGroup:
    post:
      consumes:
      - multipart/form-data
      description: 'Создает новую группу. Контакты передаются строкой в формате "название:ссылка,
        название:ссылка". Примеры: "vk:https://vk.com/mygroup, tg:https://t.me/mygroup,
        inst:https://instagram.com/mygroup"'
      parameters:
      - description: Название группы
        example: '"Моя группа"'
        in: formData
        name: name
        required: true
        type: string
      - description: Полное описание группы
        example: '"Подробное описание того, чем занимается группа"'
        in: formData
        name: description
        required: true
        type: string
      - description: Короткое описание
        example: '"Краткое описание"'
        in: formData
        name: smallDescription
        required: true
        type: string
      - description: Город локации группы (опционально)
        example: '"Москва"'
        in: formData
        name: city
        type: string
      - collectionFormat: csv
        description: Категории группы (массив ID категорий)
        in: formData
        items:
          type: integer
        name: categories
        required: true
        type: array
      - description: Приватная ли группа (true/false)
        in: formData
        name: isPrivate
        required: true
        type: boolean
      - description: Изображение группы (JPG, PNG, максимум 10MB)
        in: formData
        name: image
        required: true
        type: file
      - description: Контакты в формате 'название:ссылка, название:ссылка'. Поддерживаются
          любые названия соц. сетей
        example: '"vk:https://vk.com/mygroup, tg:https://t.me/mygroup"'
        in: formData
        name: contacts
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Группа успешно создана
          schema:
            $ref: '#/definitions/groups.Group'
        "400":
          description: Некорректные данные или ошибка валидации
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Не авторизован
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Создание группы
      tags:
      - groups_admin
  /api/groups/joinToGroup:
    post:
      consumes:
      - application/json
      description: Новый пользователь присоединяется к группе
      parameters:
      - description: Данные для присоединения к группе
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handlers.JoinGroupInputDoc'
      produces:
      - application/json
      responses:
        "200":
          description: 'Успешный ответ: вступил или заявка отправлена'
          schema:
            $ref: '#/definitions/handlers.JoinGroupResponseDoc'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Присоединение к группе
      tags:
      - groups
  /api/groups/requests/{groupId}:
    get:
      consumes:
      - application/json
      description: Получение всех заявок на вступление в закрытые группы, где текущий
        пользователь является администратором
      parameters:
      - description: ID группы
        in: path
        name: groupId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Список заявок
          schema:
            $ref: '#/definitions/handlers.GetJoinRequestsResponseDoc'
        "401":
          description: Ошибка авторизации
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Нет доступа или пользователь не найден
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Получить заявки на вступление
      tags:
      - groups
  /api/groups/search:
    get:
      consumes:
      - application/json
      description: Поиск групп по названию, категориям и с сортировкой (с пагинацией).
      parameters:
      - description: Название группы для поиска
        in: query
        name: name
        type: string
      - description: Фильтр по категории
        in: query
        name: category
        type: string
      - description: 'Поле сортировки: members (по числу участников), date (по дате
          регистрации), category (по имени категории)'
        in: query
        name: sort_by
        type: string
      - default: desc
        description: 'Порядок сортировки: asc или desc'
        in: query
        name: order
        type: string
      - default: 1
        description: Номер страницы (>=1)
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Успешный поиск
          schema:
            $ref: '#/definitions/services.GetGroupsResponse'
        "400":
          description: Некорректный номер страницы
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Пользователь не авторизован
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Поиск групп
      tags:
      - search
  /api/news:
    get:
      description: Возвращает постраничный список новостей, отсортированных по дате
        создания.
      parameters:
      - default: 1
        description: Номер страницы
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Постраничный список новостей
          schema:
            $ref: '#/definitions/services.NewsPage'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Получить список новостей
      tags:
      - News
    post:
      consumes:
      - application/json
      description: Создает новую новость вместе с текстом. Доступно только администраторам.
      parameters:
      - description: Данные для создания новости
        in: body
        name: news
        required: true
        schema:
          $ref: '#/definitions/services.CreateNewsInput'
      produces:
      - application/json
      responses:
        "201":
          description: Новость успешно создана
          schema:
            $ref: '#/definitions/news.News'
        "400":
          description: Некорректные данные или ошибка валидации
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Пользователь не авторизован или не является администратором
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Создание новости
      tags:
      - News
  /api/news/{id}:
    get:
      consumes:
      - application/json
      description: Возвращает новость по ID с текстом и комментариями (с ником и картинкой
        юзера)
      parameters:
      - description: ID новости
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Новость с текстом и комментариями
          schema:
            $ref: '#/definitions/services.NewsDTO'
        "404":
          description: Новость не найдена
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Получение новости
      tags:
      - News
  /api/news/{id}/comments:
    post:
      consumes:
      - application/json
      description: Создаёт комментарий для новости (только авторизованные пользователи)
      parameters:
      - description: ID новости
        in: path
        name: id
        required: true
        type: integer
      - description: Комментарий
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/services.CreateCommentInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/news.Comments'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Добавить комментарий
      tags:
      - News
  /api/news/{newsId}/comments/{commentId}:
    delete:
      consumes:
      - application/json
      description: Удаляет комментарий (только для администраторов)
      parameters:
      - description: ID новости
        in: path
        name: newsId
        required: true
        type: integer
      - description: ID комментария
        in: path
        name: commentId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Удалить комментарий
      tags:
      - Comments
  /api/sessions/{sessionId}/leave:
    delete:
      description: Позволяет пользователю покинуть сессию, в которой он участвует
      parameters:
      - description: ID сессии
        in: path
        name: sessionId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Вы успешно покинули сессию
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Некорректный ID
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Вы не состоите в сессии или нет доступа
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Сессия не найдена
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Отписаться от сессии
      tags:
      - Сессии
  /api/sessions/createSession:
    post:
      consumes:
      - multipart/form-data
      description: Создает сессию в группе с возможностью загрузки изображения и добавления
        метаданных
      parameters:
      - description: Название сессии
        in: formData
        name: title
        required: true
        type: string
      - description: Тип сессии
        in: formData
        name: session_type
        required: true
        type: string
      - description: Типа проведения сессии
        in: formData
        name: session_place
        required: true
        type: integer
      - description: ID группы
        in: formData
        name: group_id
        required: true
        type: integer
      - description: Время начала (в формате RFC3339, напр. 2025-07-10T19:00:00+02:00)
        in: formData
        name: start_time
        required: true
        type: string
      - description: Длительность в минутах
        in: formData
        name: duration
        type: integer
      - description: Максимальное количество участников
        in: formData
        name: count_users
        required: true
        type: integer
      - description: 'Жанры (через запятую, напр: драма,комедия)'
        in: formData
        name: genres
        type: string
      - description: 'Доп. поля (напр: ключ:значение,ключ2:знач2)'
        in: formData
        name: fields
        type: string
      - description: Место проведения
        in: formData
        name: location
        type: string
      - description: 'Год (например: 2023)'
        in: formData
        name: year
        type: integer
      - description: Страна
        in: formData
        name: country
        type: string
      - description: 'Возрастное ограничение (напр: 16+)'
        in: formData
        name: age_limit
        type: string
      - description: Примечания
        in: formData
        name: notes
        type: string
      - description: Изображение
        in: formData
        name: image
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Сессия создана
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Ошибка запроса
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Не передан JWT
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Ошибка сервера или валидации
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Создание новой сессии
      tags:
      - Сессии
  /api/sessions/genres:
    get:
      description: Возвращает список всех доступных жанров для сессий.
      produces:
      - application/json
      responses:
        "200":
          description: Список жанров
          schema:
            items:
              type: string
            type: array
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Получение списка жанров
      tags:
      - Сессии
  /api/sessions/join:
    post:
      consumes:
      - application/json
      description: Позволяет пользователю присоединиться к выбранной сессии, если
        она не заполнена
      parameters:
      - description: Данные для присоединения к группе
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handlers.SessionJoinInputDoc'
      produces:
      - application/json
      responses:
        "200":
          description: Вы успешно присоединились к сессии
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Ошибка разбора формы
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Пользователь не авторизован
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Сессия или пользователь не найдены
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Сессия заполнена или пользователь уже присоединился
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Присоединение к сессии
      tags:
      - Сессии
  /api/sessions/register:
    post:
      consumes:
      - application/json
      description: Создает сессию для подтверждения email пользователя при регистрации
      parameters:
      - description: Email пользователя
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handlers.SessionEmailInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SessionRegResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Создать сессию регистрации
      tags:
      - sessions
  /api/sessions/sessions/{id}:
    delete:
      description: Удаляет сессию, если пользователь является admin или operator в
        группе
      parameters:
      - description: ID сессии для удаления
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Сессия удалена
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Неверный ID
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: JWT не передан
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Недостаточно прав
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Сессия не найдена
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Ошибка сервера или БД
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Удаление сессии
      tags:
      - Сессии
  /api/sessions/verify:
    patch:
      consumes:
      - application/json
      description: Проверяет код сессии, отправленный на email
      parameters:
      - description: Данные сессии для проверки
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/services.VerifySessionInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: boolean
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "429":
          description: Too Many Requests
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Проверить сессию
      tags:
      - sessions
  /api/users:
    post:
      consumes:
      - application/json
      description: Регистрирует нового пользователя по данным из запроса
      parameters:
      - description: Данные для создания пользователя
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/services.CreateUserInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Создать пользователя
      tags:
      - users
  /api/users/{us}:
    get:
      consumes:
      - application/json
      description: Получение информации о пользователе по значению поля "us"
      parameters:
      - description: User us
        in: path
        name: us
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get user by us
      tags:
      - users
  /api/users/confirm-reset:
    post:
      consumes:
      - application/json
      description: Пользователь вводит session_id, код из email и новый пароль. При
        успешной верификации пароль меняется.
      parameters:
      - description: Данные для подтверждения и новый пароль
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/services.ConfirmResetPasswordInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Сброс пароля
      tags:
      - auth
  /api/users/delete:
    delete:
      description: Позволяет текущему авторизованному пользователю удалить свой аккаунт.
        Это действие необратимо.
      produces:
      - application/json
      responses:
        "200":
          description: Аккаунт успешно удалён
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Ошибка (например, пользователь не найден)
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Пользователь не авторизован
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Удаление аккаунта пользователя
      tags:
      - Users inf
  /api/users/inf:
    get:
      description: Возвращает полную информацию о текущем авторизованном пользователе,
        включая его сессии и статистику.
      produces:
      - application/json
      responses:
        "200":
          description: Полная информация о пользователе
          schema:
            $ref: '#/definitions/services.InformationAboutUser'
        "401":
          description: Пользователь не авторизован
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Пользователь не найден
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Получить информацию о текущем пользователе
      tags:
      - Users inf
  /api/users/inf/{id}:
    get:
      description: Возвращает полную информацию о текущем авторизованном пользователе,
        включая его сессии и статистику.
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Полная информация о пользователе
          schema:
            $ref: '#/definitions/services.InformationAboutUser'
        "401":
          description: Пользователь не авторизован
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Пользователь не найден
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Получить информацию о другом пользователе
      tags:
      - Users inf
  /api/users/invites/{id}/approve:
    put:
      description: Принимает приглашение в группу по его ID. Пользователь добавляется
        в участники группы.
      parameters:
      - description: ID приглашения
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Приглашение успешно принято
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Некорректный ID или ошибка обработки приглашения (например,
            уже обработано или нет доступа)
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Пользователь не авторизован
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Принять приглашение в группу
      tags:
      - Users inf
  /api/users/invites/{id}/reject:
    put:
      description: Отклоняет приглашение в группу по его ID.
      parameters:
      - description: ID приглашения
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Приглашение успешно отклонено
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Некорректный ID или ошибка обработки приглашения (например,
            уже обработано или нет доступа)
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Пользователь не авторизован
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Отклонить приглашение в группу
      tags:
      - Users inf
  /api/users/login:
    post:
      consumes:
      - application/json
      description: Проверяет email и пароль, возвращает access и refresh токены
      parameters:
      - description: Данные пользователя
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handlers.UserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Токены успешно созданы
          schema:
            $ref: '#/definitions/handlers.AuthResponse'
        "400":
          description: Некорректный JSON или параметры
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Неверный пароль
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Пользователь не найден
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Аутентификация пользователя
      tags:
      - auth
  /api/users/notifications/viewed:
    post:
      consumes:
      - application/json
      description: Помечает указанное уведомление как просмотренное для текущего пользователя.
      parameters:
      - description: ID уведомления для отметки
        in: body
        name: notification
        required: true
        schema:
          properties:
            id:
              type: integer
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Уведомление успешно отмечено как просмотренное
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Некорректный запрос или уведомление не найдено
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Пользователь не авторизован
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Отметить уведомление как просмотренное
      tags:
      - Users inf
  /api/users/notify:
    get:
      description: Возвращает список непросмотренных уведомлений и ожидающих приглашений
        в группы для текущего пользователя.
      produces:
      - application/json
      responses:
        "200":
          description: Список уведомлений и приглашений
          schema:
            $ref: '#/definitions/services.GetNotifyResponse'
        "401":
          description: Пользователь не авторизован
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Получить уведомления пользователя
      tags:
      - Users inf
  /api/users/password:
    patch:
      consumes:
      - application/json
      description: Обновляет пароль для текущего авторизованного пользователя.
      parameters:
      - description: Новый пароль
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/handlers.ChangePasswordInput'
      produces:
      - application/json
      responses:
        "200":
          description: Пароль успешно изменен
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Некорректные данные
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Пользователь не авторизован
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Смена пароля пользователя
      tags:
      - Users inf
  /api/users/refresh:
    post:
      consumes:
      - application/json
      description: По refresh токену выдает новые access и refresh токены
      parameters:
      - description: Refresh токен
        in: body
        name: refreshRequest
        required: true
        schema:
          $ref: '#/definitions/handlers.RefreshRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Новые токены успешно созданы
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Отсутствует или неверный refresh_token
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Невалидный или просроченный refresh token
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Обновление токенов
      tags:
      - auth
  /api/users/request-reset:
    post:
      consumes:
      - application/json
      description: Пользователь указывает email, на него отправляется код подтверждения
        для смены пароля.
      parameters:
      - description: Email пользователя
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/services.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SessionRegResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Запрос на сброс пароля
      tags:
      - auth
  /api/users/search:
    get:
      consumes:
      - application/json
      description: Поиск пользователей по имени с пагинацией.
      parameters:
      - description: Имя для поиска
        in: query
        name: name
        type: string
      - default: 1
        description: Номер страницы
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Успешный поиск
          schema:
            $ref: '#/definitions/services.GetUsersResponse'
        "400":
          description: Некорректный номер страницы
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Пользователь не авторизован
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Поиск пользователей
      tags:
      - search
  /api/users/sessions/{sessionId}:
    get:
      consumes:
      - application/json
      description: Возвращает подробную информацию о сессии, включая метаданные
      parameters:
      - description: Уникальный идентификатор сессии
        in: path
        minimum: 1
        name: sessionId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Успешное получение информации о сессии
          schema:
            $ref: '#/definitions/services.SessionDetailResponse'
        "400":
          description: Некорректные параметры запроса
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Ошибки аутентификации
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Доступ запрещен
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Сессия не найдена
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Получить детальную информацию о сессии
      tags:
      - Получение данных о сессиях
  /api/users/sessions/popular:
    get:
      consumes:
      - application/json
      description: Возвращает 10 самых популярных сессий из кэша Redis (обновляется
        каждые 4 часа)
      produces:
      - application/json
      responses:
        "200":
          description: Список популярных сессий из кэша
          schema:
            $ref: '#/definitions/handlers.CachedPopularSessionsDoc'
        "401":
          description: Пользователь не авторизован
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Получение популярных сессий
      tags:
      - Получение данных о сессиях
  /api/users/sessions/search:
    get:
      consumes:
      - application/json
      description: Поиск сессий по заданным критериям
      parameters:
      - description: Поисковый запрос для поиска по названию сессии
        in: query
        name: query
        type: string
      - description: ID категории сессии (session_type_id)
        in: query
        name: categoryID
        type: integer
      - description: Тип места проведения сессии
        in: query
        name: sessionType
        type: string
      - description: Фильтр по городу (берётся из метаданных Mongo)
        in: query
        name: city
        type: string
      - description: Номер страницы (начиная с 1)
        in: query
        name: page
        required: true
        type: integer
      - description: 'Критерий сортировки: date, users или city'
        in: query
        name: sort_by
        type: string
      - description: 'Порядок сортировки: asc или desc'
        in: query
        name: order
        type: string
      - description: Если true — возвращаются только новые сессии (созданные сегодня)
        in: query
        name: new_only
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Список найденных сессий
          schema:
            $ref: '#/definitions/services.PaginatedSearchResponse'
        "400":
          description: Некорректные параметры запроса
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Не передан JWT токен
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Поиск сессий
      tags:
      - Получение данных о сессиях
  /api/users/sessions/user-groups:
    get:
      consumes:
      - application/json
      description: Возвращает список сессий со статусом "Набор" из групп, в которых
        состоит пользователь, с пагинацией (9 сессий на страницу)
      parameters:
      - default: 1
        description: Номер страницы
        in: query
        minimum: 1
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Сессии успешно получены
          schema:
            items:
              $ref: '#/definitions/services.SessionResponse'
            type: array
        "400":
          description: Неверный запрос
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Не авторизован
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Пользователь не найден
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Получить сессии пользователя из групп
      tags:
      - Получение данных о сессиях
  /api/users/subscriptions:
    get:
      description: Возвращает список групп, на которые подписан пользователь, исключая
        группы, созданные им.
      parameters:
      - description: ID пользователя (опционально)
        in: query
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Список групп, на которые подписан пользователь
          schema:
            items:
              $ref: '#/definitions/services.GroupResponse'
            type: array
        "400":
          description: Не передан jwt
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Нет прав
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Пользователь не найден
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Получить подписки пользователя на группы
      tags:
      - Users inf
  /api/users/tiles:
    patch:
      consumes:
      - application/json
      description: Позволяет пользователю настроить, какие плитки статистики будут
        отображаться в его профиле.
      parameters:
      - description: Новые настройки для плиток статистики
        in: body
        name: settings
        required: true
        schema:
          $ref: '#/definitions/services.ChangeTilesPatternInput'
      produces:
      - application/json
      responses:
        "200":
          description: Порядок плиток изменен
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Некорректные данные
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Пользователь не авторизован
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Изменить порядок отображения плиток статистики
      tags:
      - Users inf
  /api/users/user/profile:
    patch:
      consumes:
      - application/json
      description: Обновляет имя, us (юзернейм) или изображение текущего пользователя.
        Поля в теле запроса опциональны.
      parameters:
      - description: Данные для обновления профиля
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/services.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Профиль успешно обновлен
          schema:
            properties:
              ' user':
                properties:
                  email:
                    type: string
                  image:
                    type: string
                  name:
                    type: string
                  us:
                    type: string
                type: object
              message:
                type: string
            type: object
        "400":
          description: Некорректные данные или ошибка (например, us уже занят)
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Пользователь не авторизован
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Обновить профиль пользователя
      tags:
      - Users inf
securityDefinitions:
  BearerAuth:
    description: 'Введите токен в формате: Bearer <your_token>'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
